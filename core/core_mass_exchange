/* -*- C++ -*- */

#ifndef CORE_MASS_EXCHANGE
#define CORE_MASS_EXCHANGE



// =============================================================================
// Mass_exchange_swept_cartesian
// =============================================================================

namespace core {
namespace hidden {

// Multiple_cartesian: helper function
template<int num, class multiple, class geometrical>
inline void multiple_cartesian(
   const twoint<num,num>,

   const multiple &,
   const multiple &,
   const multiple &,

   const geometrical &,
   const geometrical &,

   const geometrical &,
   const geometrical &,
   const geometrical &,

   multiple &,
   multiple &
) {
   // stub
}

template<int n, int num, class multiple, class geometrical>
inline void multiple_cartesian(
   const twoint<n,num>,

   const multiple &cdgx_ec,
   const multiple &cdgy_ec,
   const multiple &cod_ec,

   const geometrical &cox_ec,
   const geometrical &coy_ec,

   const geometrical &fac1,
   const geometrical &fac2,
   const geometrical &vol,

   multiple &cnm_ecl,
   multiple &cnm_ecr
) {
   typedef typename traits<multiple>::element physical;

   const physical
      rhox = core_into(cdgx_ec,n),
      rhoy = core_into(cdgy_ec,n),

      flux =
         (
            core_into(cod_ec,n)
          - rhox*physical(cox_ec)
          - rhoy*physical(coy_ec)
         )*physical(vol)
       + rhox*physical(fac1)
       - rhoy*physical(fac2);

   // adjust left and right cell masses
   core_minus_equal(core_into(cnm_ecl,n), flux);
   core_plus_equal (core_into(cnm_ecr,n), flux);

   multiple_cartesian(
      twoint<n+1,num>(),
      cdgx_ec, cdgy_ec, cod_ec,
      cox_ec, coy_ec,
      fac1, fac2, vol,
      cnm_ecl, cnm_ecr
   );
}



// Mass_exchange_swept_cartesian
template<
   class array_nodal, class array_cell_type,
   class array_array_int, class array_int,
   class array_multiple, class array_geometrical
>
void mass_exchange_swept_cartesian(
   // input
   const array_nodal &node_old_x,
   const array_nodal &node_old_y,
   const array_nodal &node_new_x,
   const array_nodal &node_new_y,

   const int   cell_old_num,
   const array_cell_type &cell_old_type,
   const array_array_int &cell_old_vert,

   const int   edge_old_num,
   const array_int &edge_old_left,
   const array_int &edge_old_right,
   const array_int &edge_old_vert,

   const array_multiple &cell_old_density,
   const array_multiple &cell_old_mass,

   const array_geometrical &cell_old_x,
   const array_geometrical &cell_old_y,

   const array_multiple &cell_old_density_grad_x,
   const array_multiple &cell_old_density_grad_y,

   // output
   array_multiple &cell_new_mass
) {
   core_begin("mass_exchange_swept_cartesian");

   typedef typename traits<array_multiple>::element multiple;
   typedef typename traits<array_geometrical>::element geometrical;
   typedef typename traits<array_nodal>::element nodal;
   const twoint<0,traits<multiple>::size> start(true);

   for (int ic = 0;  ic < cell_old_num;  ++ic)
      if (cell_old_type[ic] == core::real)
         multiple_eq_m(start, cell_new_mass[ic], cell_old_mass[ic]);

   // loop over edges
   for (int ie = 0;  ie < edge_old_num;  ++ie) {
      // left cell, right cell
      const int
         ecl = edge_old_left [ie],
         ecr = edge_old_right[ie];

      // must have no boundary cells, and at least one real cell: that is,
      // relevant iff (real,real), (real,ghost), or (ghost,real)
      if (cell_old_type[ecl] == core::boundary ||
          cell_old_type[ecr] == core::boundary ||
          cell_old_type[ecl] == core::ghost  &&
          cell_old_type[ecr] == core::ghost)
         continue;  // not a relevant edge

      // ecn = index, into left cell's vertex list, of edge's start vertex
      // a,b = indices, into node_* arrays, of edge's start and end vertices
      const int
         ecn = edge_old_vert[ie],
         a = cell_old_vert[ecl][ecn],
         b = cell_old_vert[ecl][(ecn+1) % size(cell_old_vert[ecl])];

      // compute mass flux...

      const nodal
         x1 = node_old_x[a], y1 = node_old_y[a],
         x2 = node_old_x[b], y2 = node_old_y[b],
         x3 = node_new_x[b], y3 = node_new_y[b],
         x4 = node_new_x[a], y4 = node_new_y[a];

      // volume of swept region
      const geometrical
         vol = geometrical(x1*(y2-y4) + x2*(y3-y1) + x3*(y4-y2) + x4*(y1-y3))
              /geometrical(2);

      // edge tended to move into the (left or right) cell
      const int ec = geometrical(0) < vol ? ecl : ecr;

      multiple_cartesian(
         start,

         cell_old_density_grad_x[ec],
         cell_old_density_grad_y[ec],
         cell_old_density[ec],

         cell_old_x[ec],
         cell_old_y[ec],

         geometrical((x1*x1 - x3*x3)*(y2-y4) + x2*(x1*(y2-y1) + x3*(y3-y2))
       + (x2*x2 - x4*x4)*(y3-y1) + x4*(x3*(y4-y3) + x1*(y1-y4)))/geometrical(6),

         geometrical((y1*y1 - y3*y3)*(x2-x4) + y2*(y1*(x2-x1) + y3*(x3-x2))
       + (y2*y2 - y4*y4)*(x3-x1) + y4*(y3*(x4-x3) + y1*(x1-x4)))/geometrical(6),

         vol,

         cell_new_mass[ecl],
         cell_new_mass[ecr]
      );
   }

   core_end("mass_exchange_swept_cartesian");
}

}
}



// =============================================================================
// Mass_exchange_swept_cylindrical
// =============================================================================

namespace core {
namespace hidden {

// Fun: helper function
template<class physical, class nodal>
inline physical fun(
   const physical &rhor,
   const physical &rhoz,

   const nodal &rf,
   const nodal &zf,
   const nodal &rs,
   const nodal &zs
) {
   return (
      rhor*physical((rs*rs + rf*rf)*(rs+rf))
    + rhoz*physical(
         rs*(rs*(zs*nodal(3) + zf) + rf*zs*nodal(2))
       + rf*(rf*(zf*nodal(3) + zs) + rs*zf*nodal(2))
      )/physical(2)
   )*physical(zs-zf);
}



// Multiple_cylindrical: helper function
template<int num, class multiple, class geometrical, class nodal>
inline void multiple_cylindrical(
   const twoint<num,num>,

   const multiple &,
   const multiple &,
   const multiple &,

   const geometrical &,
   const geometrical &,

   const nodal &, const nodal &, const nodal &, const nodal &,
   const nodal &, const nodal &, const nodal &, const nodal &,
   const geometrical &,

   multiple &,
   multiple &
) {
   // stub
}

template<int n, int num, class multiple, class geometrical, class nodal>
inline void multiple_cylindrical(
   const twoint<n,num>,

   const multiple &cdgr_ec,
   const multiple &cdgz_ec,
   const multiple &cod_ec,

   const geometrical &cor_ec,
   const geometrical &coz_ec,

   const nodal &r1, const nodal &z1, const nodal &r2, const nodal &z2,
   const nodal &r3, const nodal &z3, const nodal &r4, const nodal &z4,
   const geometrical &vol,

   multiple &cnm_ecl,
   multiple &cnm_ecr
) {
   typedef typename traits<multiple>::element physical;

   const physical
      rhor = core_into(cdgr_ec,n),  // gradient r component
      rhoz = core_into(cdgz_ec,n),  // gradient z component
      rhoc = core_into(cod_ec, n),  // at center of mass

      flux =
         (rhoc - rhor*physical(cor_ec) - rhoz*physical(coz_ec))*physical(vol)
       + (
            fun(rhor,rhoz, r1,z1,r2,z2)
          + fun(rhor,rhoz, r2,z2,r3,z3)
          + fun(rhor,rhoz, r3,z3,r4,z4)
          + fun(rhor,rhoz, r4,z4,r1,z1)
         )/physical(12);

   // adjust left and right cell masses
   core_minus_equal(core_into(cnm_ecl,n), flux);
   core_plus_equal (core_into(cnm_ecr,n), flux);

   multiple_cylindrical(
      twoint<n+1,num>(),
      cdgr_ec, cdgz_ec, cod_ec,
      cor_ec, coz_ec,
      r1, z1, r2, z2, r3, z3, r4, z4, vol,
      cnm_ecl, cnm_ecr
   );
}



// Mass_exchange_swept_cylindrical
template<
   class array_nodal, class array_cell_type,
   class array_array_int, class array_int,
   class array_multiple, class array_geometrical
>
void mass_exchange_swept_cylindrical(
   // input
   const array_nodal &node_old_r,
   const array_nodal &node_old_z,
   const array_nodal &node_new_r,
   const array_nodal &node_new_z,

   const int   cell_old_num,
   const array_cell_type &cell_old_type,
   const array_array_int &cell_old_vert,

   const int   edge_old_num,
   const array_int &edge_old_left,
   const array_int &edge_old_right,
   const array_int &edge_old_vert,

   const array_multiple &cell_old_density,
   const array_multiple &cell_old_mass,

   const array_geometrical &cell_old_r,
   const array_geometrical &cell_old_z,

   const array_multiple &cell_old_density_grad_r,
   const array_multiple &cell_old_density_grad_z,

   // output
   array_multiple &cell_new_mass
) {
   core_begin("mass_exchange_swept_cylindrical");

   typedef typename traits<array_multiple>::element multiple;
   typedef typename traits<array_geometrical>::element geometrical;
   typedef typename traits<array_nodal>::element nodal;
   const twoint<0,traits<multiple>::size> start(true);

   for (int ic = 0;  ic < cell_old_num;  ++ic)
      if (cell_old_type[ic] == core::real)
         multiple_eq_m(start, cell_new_mass[ic], cell_old_mass[ic]);

   // loop over edges
   for (int ie = 0;  ie < edge_old_num;  ++ie) {
      // left cell, right cell
      const int
         ecl = edge_old_left [ie],
         ecr = edge_old_right[ie];

      // must have no boundary cells, and at least one real cell: that is,
      // relevant iff (real,real), (real,ghost), or (ghost,real)
      if (cell_old_type[ecl] == core::boundary ||
          cell_old_type[ecr] == core::boundary ||
          cell_old_type[ecl] == core::ghost  &&
          cell_old_type[ecr] == core::ghost)
         continue;  // not a relevant edge

      // ecn = index, into left cell's vertex list, of edge's start vertex
      // a,b = indices, into node_* arrays, of edge's start and end vertices
      const int
         ecn = edge_old_vert[ie],
         a = cell_old_vert[ecl][ecn],
         b = cell_old_vert[ecl][(ecn+1) % size(cell_old_vert[ecl])];

      // compute mass flux...

      const nodal
         r1 = node_old_r[a], z1 = node_old_z[a],
         r2 = node_old_r[b], z2 = node_old_z[b],
         r3 = node_new_r[b], z3 = node_new_z[b],
         r4 = node_new_r[a], z4 = node_new_z[a];

      // volume of swept region
      const geometrical
         vol = geometrical(
            (z2 - z1)*(r2*(r2 + r1) + r1*r1)
          + (z3 - z2)*(r3*(r3 + r2) + r2*r2)
          + (z4 - z3)*(r4*(r4 + r3) + r3*r3)
          + (z1 - z4)*(r1*(r1 + r4) + r4*r4)
         )/geometrical(6);

      // edge tended to move into the (left or right) cell
      const int ec = geometrical(0) < vol ? ecl : ecr;

      multiple_cylindrical(
         start,

         cell_old_density_grad_r[ec],
         cell_old_density_grad_z[ec],
         cell_old_density[ec],

         cell_old_r[ec],
         cell_old_z[ec],

         r1, z1, r2, z2,
         r3, z3, r4, z4,
         vol,

         cell_new_mass[ecl],
         cell_new_mass[ecr]
      );
   }

   core_end("mass_exchange_swept_cylindrical");
}

}
}



// =============================================================================
// Mass_exchange_swept
// =============================================================================

namespace core {
namespace hidden {

template<
   class array_nodal, class array_cell_type,
   class array_array_int, class array_int,
   class array_multiple, class array_geometrical
>
inline void mass_exchange_swept(
   // input
   const coordinate_type coordinate,

   const array_nodal &node_old_x,  // or r
   const array_nodal &node_old_y,  // or z
   const array_nodal &node_new_x,  // or r
   const array_nodal &node_new_y,  // or z

   const int   cell_old_num,
   const array_cell_type &cell_old_type,
   const array_array_int &cell_old_vert,

   const int   edge_old_num,
   const array_int &edge_old_left,
   const array_int &edge_old_right,
   const array_int &edge_old_vert,

   const array_multiple &cell_old_density,
   const array_multiple &cell_old_mass,
   const array_geometrical &cell_old_x,  // or r
   const array_geometrical &cell_old_y,  // or z
   const array_multiple &cell_old_density_grad_x,  // or r
   const array_multiple &cell_old_density_grad_y,  // or z

   // output
   array_multiple &cell_new_mass
) {
   core_begin("mass_exchange_swept");

   if (coordinate == core::cartesian)
      mass_exchange_swept_cartesian(
         node_old_x, node_old_y, node_new_x, node_new_y,
         cell_old_num, cell_old_type, cell_old_vert,
         edge_old_num, edge_old_left, edge_old_right, edge_old_vert,
         cell_old_density, cell_old_mass,
         cell_old_x, cell_old_y,
         cell_old_density_grad_x, cell_old_density_grad_y,
         cell_new_mass
      );
   else
      mass_exchange_swept_cylindrical(
         node_old_x, node_old_y, node_new_x, node_new_y,
         cell_old_num, cell_old_type, cell_old_vert,
         edge_old_num, edge_old_left, edge_old_right, edge_old_vert,
         cell_old_density, cell_old_mass,
         cell_old_x, cell_old_y,
         cell_old_density_grad_x, cell_old_density_grad_y,
         cell_new_mass
      );

   core_end("mass_exchange_swept");
}

}
}



// =============================================================================
// =============================================================================
// =============================================================================
// =============================================================================
// =============================================================================



// =============================================================================
// Cellinter
// =============================================================================

namespace core {
namespace hidden {

// Puts the input polygon into vector<pair> form, and
// computes its minimum and maximum x and y coordinates.

template<class array_int, class array_nodal, class PAIR>
void cellinter(
   // input
   const array_int &cell_vert,  // can be for the old grid or the new grid
   const array_nodal &node_x,  // ditto
   const array_nodal &node_y,  // ditto

   // output
   std::vector<PAIR> &poly,  // the polygon, in vector<pair> form
   PAIR &polymin,  // minimum (x,y) on the polygon
   PAIR &polymax   // maximum (x,y) on the polygon
) {
   const int n = cell_vert[0];

   poly.erase(poly.begin(), poly.end());
   poly.push_back(PAIR(
      polymin.x = polymax.x = node_x[n],
      polymin.y = polymax.y = node_y[n]
   ));

   const int nvert = size(cell_vert);
   for (int v = 1;  v < nvert;  ++v) {
      const int n = cell_vert[v];
      poly.push_back(PAIR(node_x[n], node_y[n]));

      if (node_x[n] < polymin.x) polymin.x = node_x[n]; else
      if (polymax.x < node_x[n]) polymax.x = node_x[n];

      if (node_y[n] < polymin.y) polymin.y = node_y[n]; else
      if (polymax.y < node_y[n]) polymax.y = node_y[n];
   }
}

}
}



// =============================================================================
// Mass_cart
// Mass_cyl
// =============================================================================

namespace core {
namespace hidden {

// Mass_cart
template<int num, class multiple, class geometrical>
inline void mass_cart(
   const twoint<num,num>,
   const multiple &,
   const geometrical &, const geometrical &,
   const multiple &, const multiple &,
   const geometrical &, const geometrical &, const geometrical &,
   multiple &
) {
   // stub
}

template<int n, int num, class multiple, class geometrical>
inline void mass_cart(
   const twoint<n,num>,
   const multiple &rho,
   const geometrical &xc, const geometrical &yc,
   const multiple &gradx, const multiple &grady,
   const geometrical &vol, const geometrical &term1, const geometrical &term2,
   multiple &mass
) {
   typedef typename traits<multiple>::element physical;
   core_plus_equal(core_into(mass,n),
      (core_into(rho,n)
      -core_into(gradx,n)*physical(xc)
      -core_into(grady,n)*physical(yc)
      )*physical(vol)
    + (core_into(gradx,n)*physical(term1)
      -core_into(grady,n)*physical(term2)
      )/physical(6)
   );
   mass_cart(twoint<n+1,num>(), rho,xc,yc,gradx,grady, vol,term1,term2, mass);
}



// Mass_cyl
template<int num, class multiple, class geometrical>
inline void mass_cyl(
   const twoint<num,num>,
   const multiple &,
   const geometrical &, const geometrical &,
   const multiple &, const multiple &,
   const geometrical &, const geometrical &, const geometrical &,
   multiple &
) {
   // stub
}

template<int n, int num, class multiple, class geometrical>
inline void mass_cyl(
   const twoint<n,num>,
   const multiple &rho,
   const geometrical &rc, const geometrical &zc,
   const multiple &gradr, const multiple &gradz,
   const geometrical &vol, const geometrical &term1, const geometrical &term2,
   multiple &mass
) {
   typedef typename traits<multiple>::element physical;
   core_plus_equal(core_into(mass,n),
      (core_into(rho,n)
      -core_into(gradr,n)*physical(rc)
      -core_into(gradz,n)*physical(zc)
      )*physical(vol)
    + (core_into(gradr,n)*physical(term1)*physical(2)
      +core_into(gradz,n)*physical(term2)
      )/physical(24)
   );
   mass_cyl(twoint<n+1,num>(), rho,rc,zc,gradr,gradz, vol,term1,term2, mass);
}

}
}



// =============================================================================
// Handle_intersection
// =============================================================================

namespace core {
namespace hidden {

/*
Cartesian
   Volume
      (1/2) * sum (xnext + xcurr) * (ynext - ycurr)

   Mass
      vol * (rho - gradx*xc - grady*yc)
      + (gradx/6) * sum (ynext - ycurr) * (xnext*(xnext + xcurr) + xcurr*xcurr)
      - (grady/6) * sum (xnext - xcurr) * (ynext*(ynext + ycurr) + ycurr*ycurr)

Cylindrical
   Volume
      (1/6) * sum (znext - zcurr) * (rnext*(rnext + rcurr) + rcurr*rcurr)

   Mass
      vol * (rho - gradr*rc - gradz*zc)
      + (gradr/12) * sum (znext - zcurr) * (rnext^2 + rcurr^2) * (rnext + rcurr)
      + (gradz/24) * sum (znext - zcurr) * (
        zcurr*(rnext*(rnext + rcurr + rcurr) + 3*rcurr*rcurr)
      + znext*(rcurr*(rcurr + rnext + rnext) + 3*rnext*rnext)
      )
*/

template<class geometrical, class multiple>
void handle_intersection(
   const coordinate_type coordinate,

   const std::vector<point<geometrical> > &i,  // intersection
   const int isize,  // isize = i.size() and is >= 3

   // density reconstruction (on the old grid)
   const multiple &rho,
   const geometrical    &xc,  // or rc
   const geometrical    &yc,  // or zc
   const multiple &gradx,  // or gradr
   const multiple &grady,  // or gradz

   geometrical    &volume,  // we'll increment this
   multiple &mass     // we'll increment this
) {
   const twoint<0,traits<multiple>::size> start(true);

   geometrical
      vol   = geometrical(0),
      term1 = geometrical(0),
      term2 = geometrical(0);
   int curr = isize-1;

   if (coordinate == core::cartesian) {
      geometrical xcurr = i[curr].x, ycurr = i[curr].y;

      for (int next = 0;  next < isize;  curr = next++) {
         const geometrical xnext = i[next].x, ynext = i[next].y;

         core_plus_equal(vol,  (xnext+xcurr)*(ynext-ycurr));
         core_plus_equal(term1,(ynext-ycurr)*(xnext*(xnext+xcurr)+xcurr*xcurr));
         core_plus_equal(term2,(xnext-xcurr)*(ynext*(ynext+ycurr)+ycurr*ycurr));

         xcurr = xnext;
         ycurr = ynext;
      }

      core_plus_equal(volume, core_divide_equal(vol, geometrical(2)));
      mass_cart(start, rho,xc,yc,gradx,grady, vol,term1,term2, mass);

   } else {
      geometrical rcurr = i[curr].x, zcurr = i[curr].y;

      for (int next = 0;  next < isize;  curr = next++) {
         const geometrical rnext = i[next].x, znext = i[next].y;

         core_plus_equal(vol,   (znext - zcurr)
                         * (rnext*(rnext + rcurr) + rcurr*rcurr));
         core_plus_equal(term1, (znext - zcurr)
                         * (rnext*rnext+rcurr*rcurr) * (rnext + rcurr));
         core_plus_equal(term2, (znext - zcurr) * (
            zcurr*(rnext*(rnext + rcurr + rcurr) + rcurr*rcurr*geometrical(3))
          + znext*(rcurr*(rcurr + rnext + rnext) + rnext*rnext*geometrical(3))
         ));

         rcurr = rnext;
         zcurr = znext;
      }

      core_plus_equal(volume, core_divide_equal(vol, geometrical(6)));
      mass_cyl(start, rho,xc,yc,gradx,grady, vol,term1,term2, mass);
   }
}

}
}



// =============================================================================
// Get_offproc_neighborhood
// =============================================================================

namespace core {
namespace hidden {

// Quantities are on the old grid when this is called for mass exchange,
// and on the new grid when this is called for mass repair.

template<class array_cell_type, class array_array_int>
int get_offproc_neighborhood(
   const int   cell_num,
   const array_cell_type &cell_type,
   const array_array_int &cell_vert,
         array_array_int &cell_cell,  // we will compute cell_cell[bc] sub-array
   const int   bc
) {
   // initialize the (currently empty) cell_cell[bc] with
   // bc's real and ghost neighbors, in no particular order.

   const int bvert = size(cell_vert[bc]);
   std::vector<int> bnay;

   // Note: this could be made more efficient
   for (int ic = 0;  ic < cell_num;  ++ic) {
      if (cell_type[ic] == core::boundary || ic == bc)
         continue;

      // examine every other real and ghost cell
      const int ivert = size(cell_vert[ic]);
      bool touch = false;
      for (int iv = 0;  iv < ivert && !touch;  ++iv)
      for (int bv = 0;  bv < bvert && !touch;  ++bv)
         if (cell_vert[ic][iv] == cell_vert[bc][bv]) {
            bnay.push_back(ic);  // cell ic touches cell bc
            touch = true;
         }
   }

   const int num = bnay.size();
   resize_if_different(cell_cell[bc], num);

   for (int n = 0;  n < num;  ++n)
      cell_cell[bc][n] = bnay[n];
   return num;
}

}
}



// =============================================================================
// Me_expand_neighborhood ("me" for "mass exchange")
// =============================================================================

namespace core {
namespace hidden {

// Returns true iff the neighborhood *can* be expanded, that is, if an attempt
// to expand the neighborhood gives us more cells than we already had.
template<class array_cell_type, class array_array_int>
bool me_expand_neighborhood(
   const int   cell_old_num,
   const array_cell_type &cell_old_type,
   const array_array_int &cell_old_vert,
         array_array_int &cell_old_cell,

   std::set<int> &full,  // full neighborhood
   std::set<int> &fnew,  // new part of "full"

   const int level,      // current level; we're expanding to level+1
   const int max_level,  // available thickness of ghost-cell layer

   int  &offproc_level,
   bool &offproc_note,   // flag: already printed this note for this cell

   const int ic
) {
   std::set<int> s;  // additional neighbors

   for (set_int_iterator it = fnew.begin();  it != fnew.end();  ++it) {
      const int jc = *it;
      // jc is an existing real or ghost neighbor; now record its num real
      // and ghost neighbors, which may need to be found first if jc is an
      // off-processor cell...
      int num = size(cell_old_cell[jc]);

      if (cell_old_type[jc] == core::ghost) {
         // for an off-processor cell, we may need to find the neighborhood

         if (offproc_level == -1)   // haven't seen an ghost cell before;
            offproc_level = level;  // but now found one, at the current level

         if (!offproc_note && level-offproc_level+1 == max_level) {
            // possibly, but not necessarily, a problem
            std::core_cerr
               << "[core] Note: number of neighborhood levels ("
               << max_level << ") possibly\ninsufficient for computation of "
               "intersections for new cell " << ic << ".\n";
            offproc_note = true;
         }

         // find the neighborhood
         if (num == 0) num = get_offproc_neighborhood(
            cell_old_num,cell_old_type,cell_old_vert,cell_old_cell, jc
         );
      }

      // find the existing real or ghost cell's real and ghost neighbors
      for (int n = 0;  n < num;  ++n) {
         const int kc = cell_old_cell[jc][n];
         // if it's a real or ghost cell, and we haven't seen it yet...
         if (cell_old_type[kc] != core::boundary && full.insert(kc).second)
            s.insert(kc);
      }
   }
   return (fnew = s).size() > 0;
}

}
}



// =============================================================================
// Convconv
// =============================================================================

/*
static int zzz_intersection_yes = 0;
static int zzz_intersection_no  = 0;
*/

namespace core {
namespace hidden {

template<class nodal, class geometrical>
bool convconv(
   const std::vector<point<nodal> > &cellnew,
   const point<nodal> &pmin,
   const point<nodal> &pmax,
   const std::vector<point<nodal> > &cellold,
   const point<nodal> &qmin,
   const point<nodal> &qmax,

   const polyint_type polyint,
   const trim_type trim,

   const nodal &eps_inside,
   const nodal &eps_parallel,
   const nodal &eps_line,
   const geometrical &eps_trim,

   std::vector<point<geometrical> > &i,
   int &isize
) {
   // Immediately exclude cells whose bounding boxes don't intersect
   if (!(qmin.x < pmax.x && pmin.x < qmax.x &&
         qmin.y < pmax.y && pmin.y < qmax.y))
      return false;

   // Setup
   //const int psize = cellnew.size();  // if (psize < 3) return;
   //const int qsize = cellold.size();  // if (qsize < 3) return;

   static std::vector<point<geometrical> > tmp;
   if (trim != notrim)
      tmp.erase(tmp.begin(), tmp.end());

   i.erase(i.begin(), i.end());

   // Might have an intersection; must do a careful check
   if (polyint == simple)
      polysimple(  // simple algorithm
         cellnew/*,psize*/, cellold/*,qsize*/, trim == notrim ? i : tmp,
         eps_inside, eps_parallel, eps_line
      );
   else if (is_real<nodal>::result)
      polyreal(    // chasing algorithm for "real" types
         cellnew/*,psize*/, cellold/*,qsize*/, trim == notrim ? i : tmp,
         pmin, pmax, qmin, qmax
      );
   else
      polyexact(   // chasing algorithm for "exact" types
         cellnew/*,psize*/, cellold/*,qsize*/, trim == notrim ? i : tmp
      );

   // Note: we scale eps_trim by the average x and y sizes
   // of the bounding boxes of the cells.
   if (trim != notrim)
      trimpoly(
         tmp, i,
         geometrical(pmax.x-pmin.x + qmax.x-qmin.x)*eps_trim/geometrical(2),
         geometrical(pmax.y-pmin.y + qmax.y-qmin.y)*eps_trim/geometrical(2),
         trim
      );

   return (isize = i.size()) >= 3;

   /*
   // zzz take this out later...
   if ((isize = i.size()) >= 3) {
      zzz_intersection_yes++;
      return true;
   } else {
      zzz_intersection_no++;
      return false;
   }
   */
}

}
}



// =============================================================================
// Find_nearby
// Doesn't always work if grid parts are disjoint
// =============================================================================

namespace core {
namespace hidden {

// Find a "nearby" old cell at which to begin looking for intersections
template<class array_cell_type, class array_geometrical, class nodal>
inline void find_nearby(
   const int cell_old_num,
   const array_cell_type &cell_old_type,
   const array_geometrical &cell_old_x,  // or r
   const array_geometrical &cell_old_y,  // or z
   const point<nodal> &pmin,
   const point<nodal> &pmax,
   int &best_jc
) {
   typedef typename traits<array_geometrical>::element geometrical;

   const point<geometrical> pavg(
      geometrical(pmin.x + pmax.x)/geometrical(2),
      geometrical(pmin.y + pmax.y)/geometrical(2)
   );

   geometrical dmin = geometrical(0);  bool found = false;
   for (int jc = 0;  jc < cell_old_num;  ++jc)
      if (cell_old_type[jc] == core::real) {
         const geometrical
            dx = pavg.x - cell_old_x[jc],
            dy = pavg.y - cell_old_y[jc], d = dx*dx + dy*dy;
         if (!found || d < dmin) {
            dmin = d;  best_jc = jc;  found = true;
         }
      }
   assert(found);
}

}
}



// =============================================================================
// Mass_exchange_intersection
// =============================================================================

namespace core {
namespace hidden {

template<
   class geometrical, class nodal, class array_nodal, class array_cell_type,
   class array_array_int, class array_multiple, class array_geometrical,
   class array_int
>
inline void mass_exchange_intersection(
   // input
   const connectivity_type connectivity,
   const coordinate_type coordinate,
   const polyint_type polyint,
   const trim_type trim,
   const int max_level,

   const nodal &eps_inside,
   const nodal &eps_parallel,
   const nodal &eps_line,
   const geometrical &eps_trim,
   const geometrical &eps_volume,

   const array_nodal &node_old_x,  // or r
   const array_nodal &node_old_y,  // or z
   const array_nodal &node_new_x,  // or r
   const array_nodal &node_new_y,  // or z

   const int   cell_old_num,
   const array_cell_type &cell_old_type,
   const array_array_int &cell_old_vert,
   // might be modified with ghost neighbors...
         array_array_int &cell_old_cell,

   // input
   const int   cell_new_num,
   const array_cell_type &cell_new_type,
   const array_array_int &cell_new_vert,

   // input: density reconstruction (on the old grid)
   const array_multiple &cell_old_density,
   const array_geometrical &cell_old_x,  // or r
   const array_geometrical &cell_old_y,  // or z
   const array_multiple &cell_old_density_grad_x,  // or r
   const array_multiple &cell_old_density_grad_y,  // or z

   // output: "corresponding" old cell, if connectivities are different
   array_int &cell_new_to_old,

   // input: cell volume on the new grid
   const array_geometrical &cell_new_volume,

   // output
   array_multiple &cell_new_mass
) {
   core_begin("mass_exchange_intersection");

   typedef typename traits<array_multiple>::element multiple;
   typedef typename traits<multiple>::element physical;
   const twoint<0,traits<multiple>::size> start(true);

   const geometrical eps_v = eps_volume/geometrical(2);

   /*
   Notation
      ic      = new cell
      best_jc = close old cell
      jc      = old cell
   */

   // FOR EACH NEW REAL CELL
   for (int ic = 0;  ic < cell_new_num;  ++ic)
   if (cell_new_type[ic] == core::real) {

      // set mass to 0
      multiple_eq_p(start, cell_new_mass[ic], physical(0));

      // current cell, in the form needed for the intersection algorithm
      static std::vector<point<nodal> > cellnew;
      static point<nodal> pmin, pmax;
      cellinter(cell_new_vert[ic],node_new_x,node_new_y, cellnew,pmin,pmax);

      // current cell's volume, and total volume of intersections found so far
      const geometrical volneed = cell_new_volume[ic];
            geometrical volhave = geometrical(0);

      // COMPUTE INITIAL NEIGHBORHOOD
      static int best_jc;
      if (connectivity == core::same)
         best_jc = ic;  // initial neighborhood = corresponding old cell
      else {
         // connectivities are different
         if (cell_new_to_old[ic] == -1) {
            // haven't already computed it; do so now
            find_nearby(
               cell_old_num, cell_old_type, cell_old_x, cell_old_y,
               pmin, pmax, best_jc
            );
            cell_new_to_old[ic] = best_jc;  // [corresponding] old cell
         } else
            best_jc = cell_new_to_old[ic];  // [corresponding] old cell
      }

      std::set<int> full;  full.insert(best_jc);  // full neighborhood
      std::set<int> fnew;  fnew.insert(best_jc);  // new part of "full"

      // bookkeeping
      int level = 0;  int offproc_level = -1;  bool offproc_note = false;

      // FOR EACH NEIGHBORHOOD
      bool found_initial = false;  // flag: found initial intersection
      do {
         // over this neighborhood...
         bool found_intersection = false, enough_volume = false;

         // FOR EACH NOT-YET-EXAMINED OLD CELL IN THE NEIGHBORHOOD
         for (set_int_iterator it = fnew.begin();
              it != fnew.end() && !enough_volume;  ++it) {
            const int jc = *it;

            // proposed possibly-intersecting old cell
            static std::vector<point<nodal> > cellold;
            static point<nodal> qmin, qmax;
            cellinter(
               cell_old_vert[jc], node_old_x, node_old_y, cellold, qmin, qmax
            );

            // Compute intersection
            static std::vector<point<geometrical> > i;  int isize;
            if (convconv(
               cellnew,pmin,pmax, cellold,qmin,qmax, polyint,trim,
               eps_inside,eps_parallel,eps_line,eps_trim, i,isize
            )) {
               // Meaningful intersection found! Compute the integral over
               // this intersection of cell jc's reconstructed density.

               found_initial = found_intersection = true;

               geometrical volnew = geometrical(0);
               handle_intersection(
                  coordinate, i, isize,
                  cell_old_density[jc],
                  cell_old_x[jc],
                  cell_old_y[jc],
                  cell_old_density_grad_x[jc],
                  cell_old_density_grad_y[jc],
                  volnew, cell_new_mass[ic]  // output
               );
               core_plus_equal(volhave, volnew);

               // terminate if |difference| <= eps*sum/2;
               // like |difference|/average <= eps, but more robust
               if (!(eps_v*(volneed+volhave) < core_abs(volneed-volhave)))
                  enough_volume = true;

               // zzz this and the note below need more thought. What
               // if we get TOO MUCH volume???
            }
         }  // FOR EACH NOT-YET-EXAMINED OLD CELL IN THE NEIGHBORHOOD
         if (enough_volume) break;  // ...and done with the neighborhood, too

         // possibly terminate...
         if (found_initial && !found_intersection) {
            std::core_cerr
               << "[core] Note: expansion of old cell " << best_jc
               << "'s neighborhood beyond " << level << "-level\ngave no "
                  "additional intersections for new cell " << ic
               << "; tolerance\neps_line = " << eps_line << " or eps_volume = "
               << eps_volume << " possibly too strict.\nHave volume "
               << volhave << ", need volume " << volneed << ".\n";
            break;
         }

         // otherwise, expand neighborhood and continue
         if (!me_expand_neighborhood(
            cell_old_num, cell_old_type, cell_old_vert, cell_old_cell,
            full, fnew, level++, max_level, offproc_level, offproc_note, ic
         )) {
            std::core_cerr
               << "[core] Warning: unable to expand neighborhood of old cell "
               <<  best_jc << "\nbeyond " << level << "-level during "
                  "computation of intersections for new cell " << ic << ".\n";
            break;
         }
      } while (true); // FOR EACH NEIGHBORHOOD

      // now go to next real cell
   }  // FOR EACH NEW REAL CELL

   core_end("mass_exchange_intersection");
}

}
}

#endif
