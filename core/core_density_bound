/* -*- C++ -*- */

#ifndef CORE_DENSITY_BOUND
#define CORE_DENSITY_BOUND



// =============================================================================
// Density_bound
// =============================================================================

namespace core {
namespace hidden {

template<class array_cell_type, class array_array_int, class array_multiple>
void density_bound(
   // input
   const int   cell_old_num,
   const array_cell_type &cell_old_type,
   const array_array_int &cell_old_cell,
   const array_multiple &cell_old_density,

   // output
   array_multiple &cell_old_density_min,
   array_multiple &cell_old_density_max
) {
   typedef typename traits<array_multiple>::element multiple;
   const twoint<0,traits<multiple>::size> start(true);

   for (int ic = 0;  ic < cell_old_num;  ++ic)
   if (cell_old_type[ic] == core::real) {
      multiple &min = cell_old_density_min[ic];
      multiple &max = cell_old_density_max[ic];

      multiple_eq_m(start, min, cell_old_density[ic]);
      multiple_eq_m(start, max, cell_old_density[ic]);

      // loop over neighboring cells
      const int neigh = size(cell_old_cell[ic]);  // number of neighbors
      for (int jc = 0;  jc < neigh;  ++jc)
         multiple_minmax(
            start,
            min, cell_old_density[cell_old_cell[ic][jc]], max
         );
   }
}

}
}

#endif
