/* -*- C++ -*- */

#ifndef CORE_VECTOR
#define CORE_VECTOR

// Provide the minimal set of constructs necessary for the C++ standard
// library's "vector" type to work as a remapper object's array type.

namespace core {

// Traits
template<class T>
class traits<std::vector<T> > {
public:
   typedef T element;
   typedef std::vector<cell_type> array_cell_type;
   typedef std::vector<int> array_int;
   typedef std::vector<std::vector<int> > array_array_int;
   typedef std::vector<typename traits<T>::element> array_physical;
};

// Size
template<class T>
int size(const std::vector<T> &v)
{
   return v.size();
}

// Resize
template<class T>
void resize(std::vector<T> &v, const int num) {
   v = std::vector<T>(num);
}

// Extend
template<class T>
void extend(std::vector<T> &v, const int num) {
   for (int n = v.size();  n < num;  ++n)
      v.push_back(T());
}

}

#endif
