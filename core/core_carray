/* -*- C++ -*- */

#ifndef CORE_CARRAY
#define CORE_CARRAY

namespace core {
   // Traits for carray
   template<class T>
   class traits<carray<T> > {
   public:
      typedef T element;
      typedef carray<cell_type> array_cell_type;
      typedef carray<int> array_int;
      typedef carray<carray<int> > array_array_int;
      typedef carray<typename traits<T>::element> array_physical;
   };

   // Declare size, resize, and extend because they'll be carray's friends...
   template<class T> int size(const carray<T> &);
   template<class T> void resize(carray<T> &, const int);
   template<class T> void extend(carray<T> &, const int);
}



// =============================================================================
// Carray: simple C-style array, but with memory management
// =============================================================================

namespace core {

template<class T>
class carray {
   int num;
   T * ptr;

   // copy constructor: private for now, semantically incorrect
   carray(const carray &)
 : num(0), ptr(0)
   {
   }

   // copy assignment: private for now, semantically incorrect
   carray &operator=(const carray &)
   {
      return *this;
   }

public:

   // constructor: default
   explicit carray(void)
 : num(0), ptr(0)
   {
   }

   // destructor
  ~carray(void)
   {
      delete[] ptr;
   }

   // operator[]
   inline T &operator[](const int i)
   {
      core_assert(0 <= i && i < num);
      return ptr[i];
   }

   inline const T &operator[](const int i) const
   {
      core_assert(0 <= i && i < num);
      return ptr[i];
   }

   // friends
   friend int  size  <T>(const carray<T> &);
   friend void resize<T>(carray<T> &, const int);
   friend void extend<T>(carray<T> &, const int);
};

}



// =============================================================================
// Size  (carray)
// Resize(carray,newsize)
// Extend(carray,newsize)
// =============================================================================

namespace core {

// Size
template<class T>
inline int size(const carray<T> &a)
{
   return a.num;
}



// Resize
// Deallocates, then reallocates to the specified size.
// Note: requires new size >= 0 if asserts are switched on.
template<class T>
void resize(carray<T> &a, const int newsize)
{
   core_assert(newsize >= 0);

   delete[] a.ptr;
   a.ptr = new T[a.num = newsize];
}



// Extend
// Reallocates to the specified size, copies, then deallocates old data.
// Note: requires new size >= old size if asserts are switched on. New
// size >= old size is always true when extend is called from CORE itself.
// In fact, new size > old size for CORE calls.

   // Helper functions for extend
   template<class T>
   inline void extend_helper(T &to, const T &from)
   {
      to = from;
   }

   template<class T>
   inline void extend_helper(carray<T> &to, const carray<T> &from)
   {
      const int size_from = size(from);
      resize(to,size_from);
      for (int i = 0;  i < size_from;  ++i)
         to[i] = from[i];
   }

template<class T>
void extend(carray<T> &a, const int newsize)
{
   core_assert(newsize >= a.num);

   T *const ptr = new T[newsize];
   for (int i = 0;  i < a.num;  ++i)
      extend_helper(ptr[i], a.ptr[i]);
   delete[] a.ptr;

   a.num = newsize;
   a.ptr = ptr;
}

}

#endif
