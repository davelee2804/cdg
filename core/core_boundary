/* -*- C++ -*- */

#ifndef CORE_BOUNDARY
#define CORE_BOUNDARY

/*

Given
   cell_old_num
   cell_old_type
   cell_old_cell
   cell_old_density

boundary COMPUTES
   cell_old_density
for each boundary cell, leaving real and ghost cells as-is.

Note: for boundary() to be called, the boundary cells must have neighbors
listed in cell_old_cell. It turns out that geometry_wrap() does this as a
side effect. If geometry_wrap() or geometry() is called first, then those
neighbors must have been initialized in some other way.

*/



// =============================================================================
// Boundary
// =============================================================================

namespace core {
namespace hidden {

template<class array_cell_type, class array_array_int, class array_multiple>
void boundary(
   // input
   const int cell_old_num,
   const array_cell_type &cell_old_type,
   const array_array_int &cell_old_cell,

   // both input and output
   array_multiple &cell_old_density
) {
   typedef typename traits<array_multiple>::element multiple;
   typedef typename traits<multiple>::element physical;
   const twoint<0,traits<multiple>::size> start(true);

   for (int ic = 0;  ic < cell_old_num;  ++ic)
   if (cell_old_type[ic] == core::boundary) {

      // compute average density of neighbors listed in cell_old_cell
      multiple_eq_p(start, cell_old_density[ic], physical(0));
      assert(size(cell_old_cell[ic]) > 0);
      const int nnay = size(cell_old_cell[ic]);
      for (int jc = 0;  jc < nnay;  ++jc)
         multiple_pe_m(
            start,
            cell_old_density[ic],
            cell_old_density[cell_old_cell[ic][jc]]
         );

      multiple_de_p(start, cell_old_density[ic], physical(nnay));
   }
}

}
}

#endif
