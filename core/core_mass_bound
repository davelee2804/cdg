/* -*- C++ -*- */

#ifndef CORE_MASS_BOUND
#define CORE_MASS_BOUND

// Mass: compute according to the relationship mass = density * volume.
// Do for both minimum and maximum mass, from minimum and maximum density.
// Specifically: new mass bounds, new volumes, and old density bounds.



// =============================================================================
// Mass_bound
// =============================================================================

namespace core {
namespace hidden {

template<
   class array_cell_type, class array_multiple,
   class array_int, class array_geometrical
>
void mass_bound(
   const connectivity_type connectivity,

   // input
   const int cell_num,  // (both,new) if (same,different) connectivity
   const array_cell_type &cell_type,  // ditto

   // input
   const array_multiple &cell_old_density_min,
   const array_multiple &cell_old_density_max,

   // output
   array_multiple &cell_new_mass_min,
   array_multiple &cell_new_mass_max,

   // input
   const array_int &cell_new_to_old,
   const array_geometrical &cell_new_volume
) {
   // Note: if r.repair == core::norepair then we don't even get to this
   // function; see the core_subcomponent file.

   typedef typename traits<array_multiple>::element multiple;
   typedef typename traits<multiple>::element physical;
   const twoint<0,traits<multiple>::size> start(true);

   if (connectivity == core::same) {
      // connectivity = same
      for (int ic = 0;  ic < cell_num;  ++ic)
      if (cell_type[ic] == core::real) {
         multiple_eq_mtp(
            start, cell_new_mass_min[ic], cell_old_density_min[ic],
            physical(cell_new_volume[ic])
         );
         multiple_eq_mtp(
            start, cell_new_mass_max[ic], cell_old_density_max[ic],
            physical(cell_new_volume[ic])
         );
      }

   } else {
      // connectivity = different
      for (int ic = 0;  ic < cell_num;  ++ic)
      if (cell_type[ic] == core::real) {
         const int icold = cell_new_to_old[ic];
         multiple_eq_mtp(
            start, cell_new_mass_min[ic], cell_old_density_min[icold],
            physical(cell_new_volume[ic])
         );
         multiple_eq_mtp(
            start, cell_new_mass_max[ic], cell_old_density_max[icold],
            physical(cell_new_volume[ic])
         );
      }
   }
}

}
}

#endif
